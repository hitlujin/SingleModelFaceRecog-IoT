import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Conv2D, Flatten, Dropout
from tensorflow.keras.models import Model
from celebAload import load_celeba_dataset  # Assuming this function exists and is correctly implemented in celebAload.py

def preprocess_data(images, labels):
    # Example preprocessing: Resize images to 128x128, normalize pixel values
    images = tf.image.resize(images, [128, 128])
    images /= 255.0  # Normalize pixel values to [0, 1]
    return images, labels

def build_model():
    # Simple CNN for demonstration purposes
    input_layer = Input(shape=(128, 128, 3))
    x = Conv2D(32, (3, 3), activation='relu')(input_layer)
    x = Conv2D(64, (3, 3), activation='relu')(x)
    x = Flatten()(x)
    face_detect = Dense(2, activation='softmax', name='face_detect')(x)  # Face detection output
    face_recog = Dense(128, activation='softmax', name='face_recog')(x)  # Face recognition output
    face_attrs = Dense(40, activation='sigmoid', name='face_attrs')(x)  # Face attributes output

    model = Model(inputs=input_layer, outputs=[face_detect, face_recog, face_attrs])
    model.compile(optimizer='adam', loss={'face_detect': 'binary_crossentropy', 'face_recog': 'sparse_categorical_crossentropy', 'face_attrs': 'binary_crossentropy'}, metrics=['accuracy'])
    return model

def train_model(images, labels):
    model = build_model()
    images, labels = preprocess_data(images, labels)
    model.fit(images, {'face_detect': labels['detection'], 'face_recog': labels['recognition'], 'face_attrs': labels['attributes']}, epochs=10)
    model.save('multi_task_face_model.h5')

if __name__ == "__main__":
    images, labels = load_celeba_dataset()
    train_model(images, labels)